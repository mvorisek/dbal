name: "Continuous Integration"

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"

jobs:
  coding-standards:
    name: "Coding Standards"
    runs-on: "ubuntu-22.04"

    strategy:
      matrix:
        php-version:
          - "8.3"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: "cs2pr"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          dependency-versions: "highest"
          composer-options: "--prefer-dist"

      - name: "Run PHP_CodeSniffer"
        run: "vendor/bin/phpcs -q --no-colors --report=checkstyle | cs2pr"

  static-analysis-phpstan:
    name: "Static Analysis with PHPStan"
    runs-on: "ubuntu-22.04"

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.3"

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: "cs2pr"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          composer-options: "--ignore-platform-req=php+"

      - name: "Run a static analysis with phpstan/phpstan"
        run: "vendor/bin/phpstan --error-format=checkstyle | cs2pr"

  static-analysis-psalm:
    name: "Static Analysis with Psalm"
    runs-on: "ubuntu-22.04"

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.3"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          tools: cs2pr

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          composer-options: "--ignore-platform-req=php+"

      - name: Run static analysis with Vimeo Psalm
        run: vendor/bin/psalm --shepherd

      - name: Run type inference tests with Vimeo Psalm
        run: vendor/bin/psalm --config=psalm-strict.xml --shepherd

  phpunit-smoke-check:
    name: "PHPUnit with SQLite"
    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04"
        php-version:
          - "7.4"
          - "8.3"
        dependencies:
          - "highest"
        extension:
          - "pdo_sqlite"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: none
          ini-values: "zend.assertions=1"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          composer-options: "--ignore-platform-req=php+"
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Print SQLite version"
        run: >
          php -r 'printf("Testing with libsqlite version %s\n", (new PDO("sqlite::memory:"))->query("select sqlite_version()")->fetch()[0]);'
        if: "${{ matrix.extension == 'pdo_sqlite' }}"

      - name: "Print SQLite version"
        run: >
          php -r 'printf("Testing with libsqlite version %s\n", SQLite3::version()["versionString"]);'
        if: "${{ matrix.extension == 'sqlite3' }}"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit/${{ matrix.extension }}.xml"

  phpunit-mssql:
    name: "PHPUnit with MSSQL"
    runs-on: "ubuntu-20.04"

    strategy:
      fail-fast: false
      matrix:
        include:
          - php-version: "7.4"
            extension: "sqlsrv"
          - php-version: "8.3"
            extension: "pdo_sqlsrv"

    services:
      mssql:
        image: "mcr.microsoft.com/mssql/server:2019-latest"
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "Doctrine2018"
          MSSQL_COLLATION: "Latin1_General_100_CI_AS_SC_UTF8"

        options: >-
          --health-cmd "echo quit | /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1 -l 1 -U sa -P Doctrine2018"

        ports:
          - "1433:1433"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: none
          ini-values: "zend.assertions=1"
          tools: "pecl"
          extensions: "${{ matrix.extension }}-5.10.0beta1"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          composer-options: "--ignore-platform-req=php+"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c ci/github/phpunit/${{ matrix.extension }}.xml"
